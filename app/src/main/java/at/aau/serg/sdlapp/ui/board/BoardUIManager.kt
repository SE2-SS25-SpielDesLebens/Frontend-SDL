package at.aau.serg.sdlapp.ui.board

import android.app.AlertDialog
import android.content.Context
import android.os.Handler
import android.os.Looper
import android.view.LayoutInflater
import android.view.animation.AlphaAnimation
import android.widget.Button
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import at.aau.serg.sdlapp.R
import at.aau.serg.sdlapp.model.player.CarColor
import at.aau.serg.sdlapp.model.player.Player
import at.aau.serg.sdlapp.model.player.PlayerManager
import at.aau.serg.sdlapp.network.StompConnectionManager

/**
 * Verwaltet die UI-Elemente der BoardActivity wie Dialoge, Overlays, etc.
 */
class BoardUIManager(
    private val context: Context,
    private val playerManager: PlayerManager,
    private val layoutInflater: LayoutInflater,
    private val uiCallbacks: UICallbacks
) {    /**
     * Zeigt zwei aufeinanderfolgende Dialoge:
     * 1. Dialog zur Auswahl der Spielerfarbe
     * 2. Dialog zur Auswahl des Startpunktes (normal oder Uni)
     */
    fun showStartChoiceDialog(playerName: String, stompClient: StompConnectionManager) {
        showColorSelectionDialog(playerName, stompClient)
    }
    
    /**
     * Erster Dialog: Auswahl der Spielerfarbe
     */
    private fun showColorSelectionDialog(playerName: String, stompClient: StompConnectionManager) {
        val dialogView = layoutInflater.inflate(R.layout.dialog_color_selection, null)
        val dialog = AlertDialog.Builder(context)
            .setView(dialogView)
            .setCancelable(false)
            .create()

        // Radiobuttons f√ºr die Farbauswahl
        val redRadioButton = dialogView.findViewById<android.widget.RadioButton>(R.id.rbRed)
        val blueRadioButton = dialogView.findViewById<android.widget.RadioButton>(R.id.rbBlue)
        val greenRadioButton = dialogView.findViewById<android.widget.RadioButton>(R.id.rbGreen)
        val yellowRadioButton = dialogView.findViewById<android.widget.RadioButton>(R.id.rbYellow)
        
        // Vorschau-Bild f√ºr die ausgew√§hlte Farbe
        val previewImage = dialogView.findViewById<android.widget.ImageView>(R.id.ivColorPreview)

        // Standardfarbe auf Blau setzen
        var selectedColor = CarColor.BLUE
        previewImage.setImageResource(R.drawable.car_blue_0)

        // Farbauswahl-Listener
        redRadioButton.setOnCheckedChangeListener { buttonView, isChecked ->
            if (isChecked) {
                selectedColor = CarColor.RED
                previewImage.setImageResource(R.drawable.car_red_0)
                println("üé® Farbe Rot ausgew√§hlt")
            }
        }
        
        blueRadioButton.setOnCheckedChangeListener { buttonView, isChecked ->
            if (isChecked) {
                selectedColor = CarColor.BLUE
                previewImage.setImageResource(R.drawable.car_blue_0)
                println("üé® Farbe Blau ausgew√§hlt")
            }
        }
        
        greenRadioButton.setOnCheckedChangeListener { buttonView, isChecked ->
            if (isChecked) {
                selectedColor = CarColor.GREEN
                previewImage.setImageResource(R.drawable.car_green_0)
                println("üé® Farbe Gr√ºn ausgew√§hlt")
            }
        }
        
        yellowRadioButton.setOnCheckedChangeListener { buttonView, isChecked ->
            if (isChecked) {
                selectedColor = CarColor.YELLOW
                previewImage.setImageResource(R.drawable.car_yellow_0)
                println("üé® Farbe Gelb ausgew√§hlt")
            }
        }

        // Best√§tigungsbutton
        val confirmButton = dialogView.findViewById<Button>(R.id.btnConfirmColor)

        // Best√§tigungsbutton Listener
        confirmButton.setOnClickListener {
            try {
                println("üé® Farbe $selectedColor best√§tigt")
                
                // Setze Farbe des Spielers
                val localPlayerId = playerManager.getLocalPlayer()?.id ?: ""
                playerManager.setLocalPlayer(localPlayerId, selectedColor)
                
                // Sende Farbe an Backend
                stompClient.sendColorSelection(playerName, selectedColor.name)
                
                // Zeige Best√§tigung
                Toast.makeText(context, "Farbe $selectedColor ausgew√§hlt", Toast.LENGTH_SHORT).show()
                
                // Schlie√üe diesen Dialog und √∂ffne den Startpunkt-Dialog
                dialog.dismiss()
                println("üé® Farbauswahl-Dialog geschlossen")
                
                // Zweiter Dialog f√ºr die Startpunktauswahl anzeigen
                showPositionSelectionDialog(playerName, stompClient, selectedColor)
                
            } catch (e: Exception) {
                println("‚ùå‚ùå‚ùå Fehler bei der Farbauswahl: ${e.message}")
                e.printStackTrace()
                // Dialog trotzdem schlie√üen, damit der Benutzer nicht feststeckt
                dialog.dismiss()
            }
        }

        // Dialog anzeigen
        dialog.show()
    }
      /**
     * Zweiter Dialog: Auswahl des Startpunktes
     */
    private fun showPositionSelectionDialog(playerName: String, stompClient: StompConnectionManager, selectedColor: CarColor) {
        val dialogView = layoutInflater.inflate(R.layout.dialog_position_selection, null)
        val dialog = AlertDialog.Builder(context)
            .setView(dialogView)
            .setCancelable(false)
            .create()
            
        // Vorschau der gew√§hlten Farbe anzeigen
        val colorPreviewImage = dialogView.findViewById<android.widget.ImageView>(R.id.ivPositionColorPreview)
        when (selectedColor) {
            CarColor.RED -> colorPreviewImage.setImageResource(R.drawable.car_red_0)
            CarColor.BLUE -> colorPreviewImage.setImageResource(R.drawable.car_blue_0)
            CarColor.GREEN -> colorPreviewImage.setImageResource(R.drawable.car_green_0)
            CarColor.YELLOW -> colorPreviewImage.setImageResource(R.drawable.car_yellow_0)
        }

        // Buttons f√ºr die Startpunktauswahl
        val normalButton = dialogView.findViewById<Button>(R.id.btnStartNormal)
        val uniButton = dialogView.findViewById<Button>(R.id.btnStartUni)

        // Normal-Start Button
        normalButton.setOnClickListener {
            try {
                println("üéÆ Normal-Start Button geklickt")
                // Starte am normalen Startfeld (Index 1)
                val startFieldIndex = 1
                
                // Zeige Zusammenfassung der Auswahl
                Toast.makeText(context, "Du spielst mit Farbe $selectedColor und startest normal", Toast.LENGTH_SHORT).show()
                
                // Schlie√üe diesen Dialog und √∂ffne den Spielerreihenfolge-Dialog
                dialog.dismiss()
                println("üéÆ Startpositon-Dialog geschlossen")
                
                // Dritter Dialog f√ºr die Spielerreihenfolge anzeigen
                showPlayerOrderDialog(playerName, stompClient, selectedColor, startFieldIndex)
                
            } catch (e: Exception) {
                println("‚ùå‚ùå‚ùå Fehler beim Normal-Start: ${e.message}")
                e.printStackTrace()
                // Dialog trotzdem schlie√üen, damit der Benutzer nicht feststeckt
                dialog.dismiss()
                // Trotz Fehler die Startfeld-Auswahl √ºbernehmen
                uiCallbacks.onStartFieldSelected(1)
            }
        }

        // Uni-Start Button
        uniButton.setOnClickListener {
            try {
                println("üéì Uni-Start Button geklickt")
                // Starte am Uni-Startfeld (Index 10)
                val startFieldIndex = 10
                
                // Zeige Zusammenfassung der Auswahl
                Toast.makeText(context, "Du spielst mit Farbe $selectedColor und startest an der Uni", Toast.LENGTH_SHORT).show()
                
                // Schlie√üe diesen Dialog und √∂ffne den Spielerreihenfolge-Dialog
                dialog.dismiss()
                println("ÔøΩ Startposition-Dialog geschlossen")
                
                // Dritter Dialog f√ºr die Spielerreihenfolge anzeigen
                showPlayerOrderDialog(playerName, stompClient, selectedColor, startFieldIndex)
                
            } catch (e: Exception) {
                println("‚ùå‚ùå‚ùå Fehler beim Uni-Start: ${e.message}")
                e.printStackTrace()
                // Dialog trotzdem schlie√üen, damit der Benutzer nicht feststeckt
                dialog.dismiss()
                // Trotz Fehler die Startfeld-Auswahl √ºbernehmen
                uiCallbacks.onStartFieldSelected(10)
            }
        }

        // Dialog anzeigen
        dialog.show()
    }
    
    /**
     * Dritter Dialog: Auswahl der Spielerreihenfolge
     */
    private fun showPlayerOrderDialog(playerName: String, stompClient: StompConnectionManager, selectedColor: CarColor, startFieldIndex: Int) {
        val dialogView = layoutInflater.inflate(R.layout.dialog_player_order_selection, null)
        val dialog = AlertDialog.Builder(context)
            .setView(dialogView)
            .setCancelable(false)
            .create()
            
        // Vorschau der gew√§hlten Farbe anzeigen
        val colorPreviewImage = dialogView.findViewById<android.widget.ImageView>(R.id.ivOrderColorPreview)
        when (selectedColor) {
            CarColor.RED -> colorPreviewImage.setImageResource(R.drawable.car_red_0)
            CarColor.BLUE -> colorPreviewImage.setImageResource(R.drawable.car_blue_0)
            CarColor.GREEN -> colorPreviewImage.setImageResource(R.drawable.car_green_0)
            CarColor.YELLOW -> colorPreviewImage.setImageResource(R.drawable.car_yellow_0)
        }
        
        // Statustext f√ºr bereits gew√§hlte Positionen
        val selectedPositionsText = dialogView.findViewById<TextView>(R.id.tvSelectedPositions)
        
        // Positionsbuttons
        val btnPosition1 = dialogView.findViewById<Button>(R.id.btnPosition1)
        val btnPosition2 = dialogView.findViewById<Button>(R.id.btnPosition2)
        val btnPosition3 = dialogView.findViewById<Button>(R.id.btnPosition3)
        val btnPosition4 = dialogView.findViewById<Button>(R.id.btnPosition4)
        
        // Map f√ºr gew√§hlte Positionen
        val chosenPositions = mutableMapOf<String, Int>()
        
        // Abonniere Spielerreihenfolge-Updates
        stompClient.onPlayerOrdersReceived = { updatedOrders ->
            Handler(Looper.getMainLooper()).post {
                // Update der gew√§hlten Positionen
                chosenPositions.clear()
                chosenPositions.putAll(updatedOrders)
                
                // Update der UI
                updatePositionButtonStates(
                    chosenPositions,
                    btnPosition1,
                    btnPosition2,
                    btnPosition3,
                    btnPosition4,
                    selectedPositionsText
                )
            }
        }
        
        // Initial abonnieren
        stompClient.subscribeToPlayerOrders()
        
        // Button-Listener einrichten
        btnPosition1.setOnClickListener {
            handlePositionSelection(playerName, stompClient, selectedColor, startFieldIndex, 1, dialog, chosenPositions)
        }
        
        btnPosition2.setOnClickListener {
            handlePositionSelection(playerName, stompClient, selectedColor, startFieldIndex, 2, dialog, chosenPositions)
        }
        
        btnPosition3.setOnClickListener {
            handlePositionSelection(playerName, stompClient, selectedColor, startFieldIndex, 3, dialog, chosenPositions)
        }
        
        btnPosition4.setOnClickListener {
            handlePositionSelection(playerName, stompClient, selectedColor, startFieldIndex, 4, dialog, chosenPositions)
        }
        
        // Dialog anzeigen
        dialog.show()
    }
    
    /**
     * Aktualisiert den Zustand der Positions-Buttons basierend auf bereits gew√§hlten Positionen
     */
    private fun updatePositionButtonStates(
        chosenPositions: Map<String, Int>,
        btnPosition1: Button,
        btnPosition2: Button,
        btnPosition3: Button,
        btnPosition4: Button,
        statusText: TextView
    ) {
        // Deaktiviere bereits gew√§hlte Positionen
        btnPosition1.isEnabled = !chosenPositions.containsValue(1)
        btnPosition2.isEnabled = !chosenPositions.containsValue(2)
        btnPosition3.isEnabled = !chosenPositions.containsValue(3)
        btnPosition4.isEnabled = !chosenPositions.containsValue(4)
        
        // Button-Farben aktualisieren
        btnPosition1.alpha = if (btnPosition1.isEnabled) 1.0f else 0.5f
        btnPosition2.alpha = if (btnPosition2.isEnabled) 1.0f else 0.5f
        btnPosition3.alpha = if (btnPosition3.isEnabled) 1.0f else 0.5f
        btnPosition4.alpha = if (btnPosition4.isEnabled) 1.0f else 0.5f
        
        // Status-Text aktualisieren
        if (chosenPositions.isEmpty()) {
            statusText.text = "Bereits gew√§hlte Positionen: -"
        } else {
            val positionsText = chosenPositions.entries.joinToString(", ") { 
                "${it.key}: Position ${it.value}" 
            }
            statusText.text = "Bereits gew√§hlte Positionen:\n$positionsText"
        }
    }
    
    /**
     * Behandelt die Auswahl einer Spielerposition
     */
    private fun handlePositionSelection(
        playerName: String,
        stompClient: StompConnectionManager,
        selectedColor: CarColor,
        startFieldIndex: Int,
        position: Int,
        dialog: AlertDialog,
        chosenPositions: Map<String, Int>
    ) {
        try {
            println("üé≤ Spielerposition $position ausgew√§hlt")
            
            // Sende gew√§hlte Position an Server
            stompClient.sendPlayerOrder(playerName, position)
            
            // Best√§tigungsnachricht zeigen
            Toast.makeText(context, "Du spielst auf Position $position", Toast.LENGTH_SHORT).show()
            
            // Benachrichtige √ºber Startfeld-Auswahl (jetzt erst hier, am Ende des gesamten Auswahlprozesses)
            uiCallbacks.onStartFieldSelected(startFieldIndex)
            
            // Dialog schlie√üen
            dialog.dismiss()
            println("ÔøΩ Spielerreihenfolge-Dialog geschlossen")
            
        } catch (e: Exception) {
            println("‚ùå‚ùå‚ùå Fehler bei der Positionsauswahl: ${e.message}")
            e.printStackTrace()
            
            // Dialog trotzdem schlie√üen, damit der Benutzer nicht feststeckt
            dialog.dismiss()
            
            // Benachrichtige √ºber Startfeld-Auswahl trotz Fehler
            uiCallbacks.onStartFieldSelected(startFieldIndex)
        }
    }

    /**
     * Zeigt einen Fehlerdialog mit Titel und Nachricht an.
     */
    fun showErrorDialog(title: String, message: String) {
        Handler(Looper.getMainLooper()).post {
            AlertDialog.Builder(context)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("OK", null)
                .create()
                .show()

            println("‚ùå Fehlerdialog angezeigt: $title - $message")
        }
    }    /**
     * Zeigt eine Benachrichtigung √ºber einen neuen Spieler an
     */
    fun showNewPlayerNotification(playerId: String) {
        Toast.makeText(
            context,
            "Neuer Spieler beigetreten: Spieler $playerId",
            Toast.LENGTH_SHORT
        ).show()
    }

    /**
     * Zeigt eine Benachrichtigung √ºber entfernte Spieler an
     */
    fun showRemovedPlayersNotification(removedPlayers: List<String>) {
        if (removedPlayers.size == 1) {
            Toast.makeText(
                context,
                "Spieler ${removedPlayers[0]} hat das Spiel verlassen",
                Toast.LENGTH_SHORT
            ).show()
        } else if (removedPlayers.size > 1) {
            Toast.makeText(
                context,
                "${removedPlayers.size} Spieler haben das Spiel verlassen",
                Toast.LENGTH_SHORT
            ).show()
        }
    }

    /**
     * Zeigt alle aktiven Spieler mit ihren Positionen an
     * N√ºtzlich f√ºr Debug-Zwecke oder als Info f√ºr den Benutzer
     */
    fun showActivePlayersInfo() {
        val players = playerManager.getAllPlayersAsList()
        if (players.isEmpty()) {
            println("üë• Keine Spieler vorhanden")
            return
        }

        println("üë• Aktive Spieler (${players.size}):")
        players.forEach { player ->
            val isLocal = if (playerManager.isLocalPlayer(player.id)) " (Du)" else ""
            println("   üë§ Spieler ${player.id}${isLocal}: Farbe=${player.color}, Position=${player.currentFieldIndex}")
        }

        // Optional: Zeige eine Benachrichtigung mit der Anzahl der Spieler
        if (players.size > 1) {
            val otherPlayersCount = players.size - 1
            val message = "Es sind insgesamt ${players.size} Spieler online"
            Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
        }
    }

    /**
     * Zeigt ein UI mit allen aktiven Spielern an
     * Diese Methode erstellt ein Overlay mit der Spielerliste
     */
    fun showPlayerListOverlay() {
        // Spielerliste abrufen
        val players = playerManager.getAllPlayersAsList()

        // Dialog erstellen
        val dialogView = layoutInflater.inflate(R.layout.dialog_player_list, null)
        val dialog = AlertDialog.Builder(context, android.R.style.Theme_Material_Light_Dialog_MinWidth)
            .setView(dialogView)
            .setTitle("Aktive Spieler")
            .setCancelable(true)
            .create()

        // Spielerliste-Layout finden
        val playerListLayout = dialogView.findViewById<LinearLayout>(R.id.playerListLayout)

        // Spieler anzeigen oder Hinweis, wenn keine Spieler vorhanden sind
        if (players.isEmpty()) {
            val emptyView = TextView(context)
            emptyView.text = "Keine Spieler verbunden."
            emptyView.gravity = android.view.Gravity.CENTER
            playerListLayout.addView(emptyView)
        } else {
            // F√ºr jeden Spieler einen Eintrag erstellen
            for (player in players) {
                val playerItemView = layoutInflater.inflate(R.layout.item_player, null)

                // Views finden und bef√ºllen
                val nameTextView = playerItemView.findViewById<TextView>(R.id.playerNameTextView)
                val idTextView = playerItemView.findViewById<TextView>(R.id.playerIdTextView)
                val colorImageView = playerItemView.findViewById<android.widget.ImageView>(R.id.playerColorImageView)
                val positionTextView = playerItemView.findViewById<TextView>(R.id.playerPositionTextView)

                // Daten setzen
                nameTextView.text = player.name
                idTextView.text = "ID: ${player.id}"
                colorImageView.setImageResource(player.getCarImageResource())
                positionTextView.text = "Feld: ${player.currentFieldIndex}"

                // Lokalen Spieler hervorheben
                if (playerManager.isLocalPlayer(player.id)) {
                    nameTextView.setTypeface(nameTextView.typeface, android.graphics.Typeface.BOLD)
                    nameTextView.text = "${nameTextView.text} (Du)"
                }

                // Zum Layout hinzuf√ºgen
                playerListLayout.addView(playerItemView)
            }
        }

        // Dialog anzeigen
        dialog.show()
    }

    /**
     * Aktualisiert den Status-Text mit der Anzahl der aktiven Spieler
     */
    fun updateStatusText(statusText: TextView) {
        val players = playerManager.getAllPlayers()
        val count = players.size
        
        statusText.text = when {
            count == 0 -> "Keine Spieler online"
            count == 1 -> "1 Spieler online"
            else -> "$count Spieler online"
        }

        // Animation f√ºr Status√§nderung
        val animation = AlphaAnimation(0.5f, 1.0f)
        animation.duration = 500
        animation.fillAfter = true
        statusText.startAnimation(animation)
    }

    /**
     * Zeigt eine Benachrichtigung √ºber andere Spieler an
     */
    fun showOtherPlayersNotification(allPlayers: List<Player>, hasChanges: Boolean) {
        if (allPlayers.size > 1 && hasChanges) {
            val otherPlayersCount = allPlayers.size - 1
            val message = "Es ${ if(otherPlayersCount == 1) "ist" else "sind" } $otherPlayersCount andere${ if(otherPlayersCount == 1) "r" else "" } Spieler online"
            Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
        }
    }

    /**
     * Interface f√ºr die UI-Callbacks
     */
    fun interface UICallbacks {
        fun onStartFieldSelected(fieldIndex: Int)
    }
}
